#!/usr/bin/env python
import argparse
import os
from plotbee.video import Video
from plotbee.body import Body
from plotbee.export import video2coco, sleap2pb

# sub-command functions
def tracking(args):
    input_filename = args.file
    method = args.method
    path, filename = os.path.split(input_filename)
    output_filename = os.path.join(path, method + "_" + filename)
    
    print("Loading video data.")
    video = Video.load(input_filename)
    
    if method == "hungarian":
        print("Hungarian Tracking.")
        video.hungarian_tracking()
    elif method == "sort":
        print("Sort Tracking.")
        video.sort_tracking()

    print("Saving video on {}.".format(output_filename))
    video.save(output_filename)
    print("Video saved.")

def pollen(args):
    input_filename = args.file
    input_video = args.video
    model_path = args.model_json
    weights = args.weights
    workers = args.workers

    path, filename = os.path.split(input_filename)
    output_filename = os.path.join(path, "pollen_" + filename)
    
    print("Loading video data.")
    video = Video.load(input_filename)
    
    if input_video != None:
        video.load_video(input_video)

    print("Pollen Detection.")
    video.process_pollen(model_path, weights, workers=workers)

    print("Saving video on {}.".format(output_filename))
    video.save(output_filename)
    print("Video saved.")

def tags(args):
    input_filename = args.file
    input_video = args.video
    merge = args.merge
    compute = args.compute
    tags_file = args.tags_file

    path, filename = os.path.split(input_filename)
    output_filename = os.path.join(path, "tags_" + filename)

    print("Loading video data.")
    video = Video.load(input_filename)
    if input_video != None:
        video.load_video(input_video)

    if merge:
        print("Loading tag data.")
        video.load_tags(tags_file)
    elif compute:
        print("Computing tag data.")
        video.tag_detection()

    print("Saving video on {}.".format(output_filename))
    video.save(output_filename)
    print("Video saved.")

def skeleton(args):
    input_filename = args.file
    input_video = args.video
    input_format = args.format

    path, filename = os.path.split(input_filename)
    output_filename = os.path.join(path, "skeleton_" + filename)

    if input_format == "beepose":
        config = dict()
        config['DETECTIONS_PATH'] = input_filename
        config['VIDEO_PATH'] = input_video
        print("Beepose to Plotbee Convertion.")
        video = Video.from_config(config)

        print("Saving video on {}.".format(output_filename))
        video.save(output_filename)
        print("Video saved.")
    elif input_format == "sleap":
        sleap2pb(input_filename)



def pipeline(args):
    if args.skeleton:
        skeleton(args)
        path, filename = os.path.split(input_filename)
        output_filename = os.path.join(path, "skeleton_" + filename)
        args.file = output_filename

    if args.tags:
        tags(args)
        path, filename = os.path.split(input_filename)
        output_filename = os.path.join(path, "tags_" + filename)
        args.file = output_filename
    
    if args.pollen:
        pollen(args)
        path, filename = os.path.split(input_filename)
        output_filename = os.path.join(path, "pollen_" + filename)
        args.file = output_filename

    if args.tracking:
        tracking(args)

def export(args):
    input_filename = args.file
    output_folder = args.output_folder
    pollen = args.pollen
    tags = args.tags
    coco = args.coco
    images = args.images
    limit = args.size
    width = args.width
    height = args.height

    
    Body.width = width
    Body.height = height

    if pollen:
        print("Loading video data.")
        video = Video.load(input_filename)
        video.export_pollen(output_folder, limit=limit)

    if tags:
        pass
        # Todo
    
    if coco:
        video2coco(input_filename, output_folder, image_extraction=images,
                     width=width, height=height)



# create the top-level parser
parser = argparse.ArgumentParser()
parser.set_defaults(func=None)
subparsers = parser.add_subparsers()

# create the parser for the "skeleton" command
parser_skeleton = subparsers.add_parser('skeleton')
parser_skeleton.add_argument('-f', '--file', type=str, required=True)
parser_skeleton.add_argument('-v', '--video', type=str, default=None)
parser_skeleton.add_argument('--format', type=str, default="beepose")
parser_skeleton.set_defaults(func=skeleton)

# create the parser for the "pollen" command
parser_pollen = subparsers.add_parser('pollen')
parser_pollen.add_argument('-f', '--file', type=str, required=True)
parser_pollen.add_argument('-v', '--video', type=str, default=None)
parser_pollen.add_argument('--model_json', type=str, required=True)
parser_pollen.add_argument('--weights', type=str, required=True)
parser_pollen.add_argument('--workers', type=int, default=4)
parser_pollen.set_defaults(func=pollen)

# create the parser for the "tags" command
parser_tags = subparsers.add_parser('tags')
parser_tags.add_argument('-f', '--file', type=str, required=True)
parser_tags.add_argument('-v', '--video', type=str, default=None)
method = parser_tags.add_mutually_exclusive_group(required=True)
method.add_argument('--compute', action='store_true')
method.add_argument('--merge', action='store_false')
parser_tags.add_argument('--method', type=str, default="merge")
parser_tags.add_argument('-t', '--tags_file', type=str, default=None)
parser_tags.set_defaults(func=tags)

# create the parser for the "tracking" command
parser_tracking = subparsers.add_parser('tracking')
parser_tracking.add_argument('-f', '--file', type=str, required=True)
parser_tracking.add_argument('--method', type=str, default="hungarian")
parser_tracking.set_defaults(func=tracking)


# create the parser for the "pipeline" command
parser_pipeline = subparsers.add_parser('pipeline')
parser_pipeline.add_argument('--skeleton', action='store_true')
parser_pipeline.add_argument('-f', '--file', type=str, required=True)
parser_pipeline.add_argument('-v', '--video', type=str, default=None)
parser_pipeline.add_argument('--format', type=str, default="beepose")

parser_pipeline.add_argument('--pollen', action='store_true')
parser_pipeline.add_argument('--model_json', type=str, required=True)
parser_pipeline.add_argument('--weights', type=str, required=True)
parser_pipeline.add_argument('--workers', type=int, default=4)

parser_pipeline.add_argument('--tags', action='store_true')
method = parser_pipeline.add_mutually_exclusive_group(required=True)
method.add_argument('--compute', action='store_true')
method.add_argument('--merge', action='store_false')
parser_pipeline.add_argument('-t', '--tags_file', type=str, default=None)

parser_pipeline.add_argument('--tracking', action='store_true')
parser_pipeline.add_argument('--method', type=str, default="hungarian")
parser_pipeline.set_defaults(func=pipeline)

# create the parser for the "export" command
parser_export = subparsers.add_parser('export')
parser_export.add_argument('-f', '--file', type=str, required=True)
parser_export.add_argument('-o', '--output_folder', type=str, required=True)
parser_export.add_argument('-s', '--size', type=int, default=None)
parser_export.add_argument('--width', type=int, required=True)
parser_export.add_argument('--height', type=int, required=True)
parser_export.add_argument('--images', action='store_true')
datatype = parser_export.add_mutually_exclusive_group(required=True)
datatype.add_argument('--pollen', action='store_true')
datatype.add_argument('--tags', action='store_true')
datatype.add_argument('--coco', action='store_true')
parser_export.set_defaults(func=export)

#parse the args and call whatever function was selected
args = parser.parse_args()
if args.func == None:
    parser.parse_args(['-h'])
else:
    args.func(args)